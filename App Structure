Directory structure

lib/                       # <- any common code for client/server.
lib/environment.coffee         # <- general configuration
lib/methods.coffee             # <- Meteor.method definitions
lib/external               # <- common code from someone else
## Note that js files in lib folders are loaded before other js files.

collections/                   # <- definitions of collections and methods on them (could be models/)

client/lib                     # <- client specific libraries (also loaded first)
client/lib/environment.coffee  # <- configuration of any client side packages
client/lib/helpers             # <- any helpers (handlebars or otherwise) that are used often in view files

client/main.coffee             # <- subscriptions, basic Meteor.startup code.
client/index.jade              # <- toplevel html
client/index.coffee            # <- and its JS
client/views/<page>.jade       # <- the templates specific to a single page
client/views/<page>.coffee     # <- and the JS to hook it up
client/views/<type>/           # <- if you find you have a lot of views of the same object type
client/stylesheets/            # <- css / styl / less files

server/publications.coffee     # <- Meteor.publish definitions
server/lib/environment.coffee  # <- configuration of server side packages

public/                    # <- static files, such as images, that are served directly.
private/                   # <- e.g. data files - accessible for server - not client

tests/                     # <- unit test files (won't be loaded on client or server)

Structuring your application

A Meteor application is a mix of JavaScript that runs inside a client web browser, 
JavaScript that runs on the Meteor server inside a Node.js container, and all the 
supporting HTML fragments, CSS rules, and static assets. Meteor automates the packaging 
and transmission of these different components. 
And, it is quite flexible about how you choose to structure those components in your file tree.

The only server assets are JavaScript and files in the private subdirectory. 
Meteor gathers all your JavaScript files, excluding anything under the client,
 public, and private subdirectories, and loads them into a Node.js server instance inside a fiber. 
In Meteor, your server code runs in a single thread per request, not in the asynchronous 
callback style typical of Node. We find the linear execution model a better fit for the 
typical server code in a Meteor application.

Meteor gathers any files under the private subdirectory and makes the contents of these files 
available to server code via the Assets API. The private subdirectory is the place for any files 
that should be accessible to server code but not served to the client, like private data files.

There are more assets to consider on the client side. 
Meteor gathers all JavaScript files in your tree, with the exception of the server, public, and 
private subdirectories, for the client. It minifies this bundle and serves it to each new client. 
You're free to use a single JavaScript file for your entire application, or create a nested tree of 
separate files, or anything in between.

Some JavaScript libraries only work when placed in the client/compatibility subdirectory. 
Files in this directory are executed without being wrapped in a new variable scope. 
This means that each top-level var defines a global variable. 
In addition, these files are executed before other client-side JavaScript files.

Files outside the client, server and tests subdirectories are loaded on both the client and the server! 
That's the place for model definitions and other functions. Meteor provides the variables isClient and 
isServer so that your code can alter its behavior depending on whether it's running on the client or the server. 
(Files in directories named tests are not loaded anywhere.)

Any sensitive code that you don't want served to the client, such as code containing passwords or authentication 
mechanisms, should be kept in the server directory.

CSS files are gathered together as well: the client will get a bundle with all the CSS in your tree 
(excluding the server, public, and private subdirectories).

In development mode, JavaScript and CSS files are sent individually to make debugging easier.

HTML files in a Meteor application are treated quite a bit differently from a server-side framework. 
Meteor scans all the HTML files in your directory for three top-level elements: <head>, <body>, and <template>. 
The head and body sections are separately concatenated into a single head and body, which are transmitted to 
the client on initial page load.

Template sections, on the other hand, are converted into JavaScript functions, available under the Template namespace. 
It's a really convenient way to ship HTML templates to the client. See the templates section for more.

Lastly, the Meteor server will serve any files under the public directory, just like in a Rails or Django project.
This is the place for images, favicon.ico, robots.txt, and anything else.

It is best to write your application in such a way that it is insensitive to the order in which files are loaded, 
for example by using Meteor.startup, or by moving load order sensitive code into packages, which can explicitly 
control both the load order of their contents and their load order with respect to other packages. 
However sometimes load order dependencies in your application are unavoidable. The JavaScript and CSS files in an 
application are loaded according to these rules:

Files in the lib directory at the root of your application are loaded first.

Files that match main.* are loaded after everything else.

Files in subdirectories are loaded before files in parent directories, so that files in the deepest subdirectory are 
loaded first (after lib), and files in the root directory are loaded last (other than main.*).

Within a directory, files are loaded in alphabetical order by filename.

These rules stack, so that within lib, for example, files are still loaded in alphabetical order; and if there are multiple
 files named main.js, the ones in subdirectories are loaded earlier.

*** File structure, short ***

	Code in the /server directory only runs on the server.
	Code in the /client directory only runs on the client.

	Everything else runs on both the client and server.

	Files in /lib are loaded before anything else.
	Any main.* file is loaded after everything else.
	Your static assets (fonts, images, etc.) go in the /public directory.

There is a hidden .meteor directory. This is where Meteor stores its own code, 
and modifying things in there is usually a very bad idea.

In fact, you don't really ever need to look in this directory at all. 
The only exceptions to this are the .meteor/packages and .meteor/release files, 
which are respectively used to list your smart packages and the version of
Meteor to use. When you add packages and change Meteor releases, it can be helpful to check the
changes to these files.


CSS automatically gets loaded and minified by Meteor, so unlike other static assets it goes into
/client, not /public. Go ahead and create a client/stylesheets/