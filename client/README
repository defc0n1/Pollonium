There are more assets to consider on the client side. Meteor gathers all JavaScript files in your tree, with the exception of the server, public, and private subdirectories, for the client. It minifies this bundle and serves it to each new client. You're free to use a single JavaScript file for your entire application, or create a nested tree of separate files, or anything in between.

Some JavaScript libraries only work when placed in the client/compatibility subdirectory. Files in this directory are executed without being wrapped in a new variable scope. This means that each top-level var defines a global variable. In addition, these files are executed before other client-side JavaScript files.

client/lib                 # <- client specific libraries (also loaded first)
client/lib/environment.js  # <- configuration of any client side packages
client/lib/helpers         # <- any helpers (handlebars or otherwise) that are used often in view files

client/application.js      # <- subscriptions, basic Meteor.startup code.
client/index.html          # <- toplevel html
client/index.js            # <- and its JS
client/views/<page>.html   # <- the templates specific to a single page
client/views/<page>.js     # <- and the JS to hook it up
client/views/<type>/       # <- if you find you have a lot of views of the same object type
client/stylesheets/        # <- css / style / less files

Files outside the client, server and tests subdirectories are loaded on both the client and the server! That's the place for model definitions and other functions. Meteor provides the variables isClient and isServer so that your code can alter its behavior depending on whether it's running on the client or the server. (Files in directories named tests are not loaded anywhere.)

Any sensitive code that you don't want served to the client, such as code containing passwords or authentication mechanisms, should be kept in the server directory.

Files that match main.* are loaded after everything else.



Meteor scans all the HTML files in your directory for three top-level elements:
<head>, <body>, and  <template>.
The head and body sections are seperately concatenated into a single head and body,
 which are transmitted to the client on initial page load.

 When the server is started and you access the page it automatically
 adds the DOCTYPE in.

Template sections, on the other hand, are converted into JavaScript functions,
available under the Template namespace.
